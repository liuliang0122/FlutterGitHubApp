import 'package:flutter_rhine/common/common.dart';import 'login.dart';class LoginEpic implements EpicClass<AppState> {  final UserRepository userRepository;  LoginEpic(this.userRepository) : assert(userRepository != null);  @override  Stream call(Stream actions, EpicStore<AppState> store) {    return Observable.merge([      Observable(actions)          .ofType(TypeToken<InitialAction>())          .take(1)          .map((it) => it.shouldAutoLogin)          .flatMap((it) => _loginInitial(it)),      Observable(actions)          .ofType(TypeToken<LoginClickedAction>())          .flatMap((it) => _loginClicked(it.username, it.password)),    ]);  }  /// 用户进入界面初始化  /// [shouldAutoLogin] 是否自动登录  Stream _loginInitial(    final bool shouldAutoLogin,  ) async* {    if (shouldAutoLogin) {      final bool hasAutoLoginInfo = await userRepository.hasAutoLoginInfo();      if (hasAutoLoginInfo) {        final List<String> info = await userRepository.fetchAutoLoginInfo();        final String username = info[0];        final String password = info[1];        yield AutoLoginAction(username: username, password: password);        // 本地存有登录信息，自动登录        yield* _loginStateStream(username, password);        if (Config.DEBUG) {          print('用户进入界面初始化. username: $username, password: $password.');        }      } else {        if (Config.DEBUG) {          print('没有登录信息，手动登录.');        }        // 没有登录信息，手动登录        yield _loginFailure(Exception());      }    } else {      // 需要用户手动登录      yield _loginFailure(Exception());    }  }  /// 用户点击登录按钮  /// [username] 用户名  /// [password] 用户密码  Stream _loginClicked(    final String username,    final String password,  ) async* {    yield* _loginStateStream(username, password);  }  /// 用户登录  /// [username] 用户名  /// [password] 用户密码  Stream _loginStateStream(    final String username,    final String password,  ) async* {    print('login API request: username: $username, password: $password.');    yield LoginLoadingAction();    final DataResult<User> loginResult =        await userRepository.login(username, password);    print('login API result: ${loginResult.toString()}');    if (loginResult.result) {      final User user = loginResult.data;      yield LoginSuccessAction(user, user.token);      yield LoginDisposeAction();      yield AuthenticationSuccessAction(user, user.token);    } else {      yield _loginFailure(          loginResult.exception ?? Errors.loginFailureException());      yield AuthenticationFailureAction();    }  }  /// 登录失败  /// [exception] 错误信息  LoginFailureAction _loginFailure(final Exception exception) {    return LoginFailureAction(exception);  }}